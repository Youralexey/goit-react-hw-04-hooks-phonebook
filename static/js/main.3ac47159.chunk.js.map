{"version":3,"sources":["components/Container/Container.styled.jsx","components/Form/Form.styled.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/Input/Input.styled.jsx","components/Input/Input.jsx","components/Form/Form.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/App.js","index.js"],"names":["Container","styled","div","Title","h1","SectionTitle","h2","CustomForm","form","CustomButton","button","Button","text","type","onClick","CurrentInput","input","CurrentLabel","label","Input","name","value","pattern","title","onChange","Form","handleSubmit","useState","setName","number","setNumber","handleSetInfo","e","currentTarget","reset","onSubmit","preventDefault","required","ContactItem","li","ContactListItem","handleDelete","ContactList","contacts","onDeleteContact","map","id","App","JSON","parse","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","normaliseFilter","toLowerCase","filteredContacts","contact","includes","uuidv4","find","savedContact","alert","prevContacts","length","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAEaA,EAAYC,IAAOC,IAAV,sLAUTC,EAAQF,IAAOG,GAAV,qKASLC,EAAeJ,IAAOK,GAAV,0LCnBZC,EAAaN,IAAOO,KAAV,6CCAVC,EAAeR,IAAOS,OAAV,4Q,OCgBVC,I,MAAAA,EAdf,YAA0C,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAC5B,OACE,cAACL,EAAD,CAAcI,KAAMA,EAAMC,QAASA,EAAnC,SACGF,KCLMG,EAAed,IAAOe,MAAV,2FAMZC,EAAehB,IAAOiB,MAAV,gFCLV,SAASC,EAAT,GAOX,IANFN,EAMC,EANDA,KACAO,EAKC,EALDA,KACAC,EAIC,EAJDA,MAIC,IAHDC,eAGC,MAHS,KAGT,MAFDC,aAEC,MAFO,KAEP,EADDC,EACC,EADDA,SAEA,OACE,eAACP,EAAD,WACGG,EACD,cAACL,EAAD,CACEF,KAAMA,EACNO,KAAMA,EACNC,MAAOA,EACPC,QAASA,EACTC,MAAOA,EACPC,SAAUA,OCfH,SAASC,EAAT,GAAiC,IAAjBC,EAAgB,EAAhBA,aAC7B,EAAwBC,mBAAS,IAAjC,mBAAOP,EAAP,KAAaQ,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KAEMC,EAAgB,SAACC,GACrB,MAAwBA,EAAEC,cAAlBb,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,OAAQD,GACN,IAAK,OACHQ,EAAQP,GACR,MAEF,IAAK,SACHS,EAAUT,GACV,MAEF,QACE,SAWAa,EAAQ,WACZN,EAAQ,IACRE,EAAU,KAGZ,OACE,eAACvB,EAAD,CAAY4B,SAbW,SAACH,GACxBA,EAAEI,iBAEFV,EAAa,CAAEN,OAAMS,WACrBK,KASA,UACE,cAACf,EAAD,CACEN,KAAK,OACLO,KAAK,OACLC,MAAOD,EACPE,QAAQ,yHACRC,MAAM,kcACNc,UAAQ,EACRb,SAAUO,IAEZ,cAACZ,EAAD,CACEN,KAAK,MACLO,KAAK,SACLC,MAAOQ,EACPP,QAAQ,yFACRC,MAAM,giBACNc,UAAQ,EACRb,SAAUO,IAEZ,cAAC,EAAD,CAAQlB,KAAK,SAASD,KAAK,mBCvD1B,IAAM0B,EAAcrC,IAAOsC,GAAV,uICET,SAASC,EAAT,GAA0D,IAA/BpB,EAA8B,EAA9BA,KAAMS,EAAwB,EAAxBA,OAAQY,EAAgB,EAAhBA,aACtD,OACE,eAACH,EAAD,WACGlB,EADH,MACYS,EACV,cAAC,EAAD,CAAQhB,KAAK,SAASD,KAAK,SAASE,QAAS2B,OCLpC,SAASC,EAAT,GAAqD,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,gBAC9C,OACE,6BACGD,EAASE,KAAI,gBAAGC,EAAH,EAAGA,GAAI1B,EAAP,EAAOA,KAAMS,EAAb,EAAaA,OAAb,OACZ,cAACW,EAAD,CAEEpB,KAAMA,EACNS,OAAQA,EACRY,aAAc,kBAAMG,EAAgBE,KAH/BA,QCQA,SAASC,IAAO,IAAD,EAC5B,EAAgCpB,mBAAQ,UACtCqB,KAAKC,MAAMC,aAAaC,QAAQ,uBADM,QACa,IADrD,mBAAOR,EAAP,KAAiBS,EAAjB,KAGA,EAA4BzB,mBAAS,IAArC,mBAAO0B,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACRL,aAAaM,QAAQ,cAAeR,KAAKS,UAAUd,MAClD,CAACA,IAEJ,IAeMe,EAAkBL,EAAOM,cACzBC,EAAmBjB,EAASU,QAAO,SAACQ,GAAD,OACvCA,EAAQzC,KAAKuC,cAAcG,SAASJ,MAGtC,OACE,eAAC1D,EAAD,WACE,cAACG,EAAD,wBACA,cAACsB,EAAD,CAAMC,aAvBe,SAAC,GAAsB,IAApBN,EAAmB,EAAnBA,KAAMS,EAAa,EAAbA,OAC1BgC,EAAU,CAAEzC,OAAMS,SAAQiB,GAAIiB,eACpCpB,EAASqB,MAAK,SAACC,GAAD,OAAkBA,EAAa7C,KAAKuC,gBAAkBvC,EAAKuC,iBACrEO,MAAM,GAAD,OAAI9C,EAAJ,4BACLgC,GAAY,SAACe,GAAD,4BAAsBA,GAAtB,CAAoCN,UAoB7B,IAApBlB,EAASyB,QAAgB,cAAC/D,EAAD,uBACL,IAApBsC,EAASyB,QACR,cAACjD,EAAD,CACEC,KAAK,wBACLP,KAAK,OACLQ,MAAOgC,EACP7B,SAnBa,SAACQ,GACpBsB,EAAUtB,EAAEC,cAAcZ,UAqBxB,cAACqB,EAAD,CAAaC,SAAUiB,EAAkBhB,gBA1BxB,SAACyB,GACpBjB,EAAYT,EAASU,QAAO,SAACQ,GAAD,OAAaA,EAAQf,KAAOuB,YC7B5DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzB,EAAD,MAEF0B,SAASC,eAAe,W","file":"static/js/main.3ac47159.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  width: 400px;\r\n  background-color: #f0f0f0;\r\n  border-radius: 5px;\r\n  padding: 30px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 30px;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  display: block;\r\n  font-size: 26px;\r\n  font-weight: 800;\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nexport const SectionTitle = styled.h2`\r\n  display: block;\r\n  font-size: 20px;\r\n  font-weight: 800;\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  margin-top: 30px;\r\n  margin-bottom: 10px;\r\n`;","import styled from '@emotion/styled';\r\n\r\nexport const CustomForm = styled.form`\r\n  padding: 0px;\r\n`;","import styled from '@emotion/styled';\r\n\r\nexport const CustomButton = styled.button`\r\n  background-color: #ff6b0a;\r\n  border: none;\r\n  border-radius: 5px;\r\n  outline: none;\r\n  padding: 3px 12px;\r\n  color: #fff;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  line-height: 16px;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n`;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CustomButton } from \"./Button.styled\";\r\n\r\nfunction Button({ text, type, onClick }) {\r\n  return (\r\n    <CustomButton type={type} onClick={onClick}>\r\n      {text}\r\n    </CustomButton>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const CurrentInput = styled.input`\r\n  display: block;\r\n  margin-top: 6px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const CurrentLabel = styled.label`\r\n  text-transform: capitalize;\r\n  font-weight: 500;\r\n`;","import PropTypes from \"prop-types\";\r\nimport { CurrentInput, CurrentLabel } from \"./Input.styled\";\r\n\r\nexport default function Input({\r\n  type,\r\n  name,\r\n  value,\r\n  pattern = null,\r\n  title = null,\r\n  onChange,\r\n}) {\r\n  return (\r\n    <CurrentLabel>\r\n      {name}\r\n      <CurrentInput\r\n        type={type}\r\n        name={name}\r\n        value={value}\r\n        pattern={pattern}\r\n        title={title}\r\n        onChange={onChange}\r\n      />\r\n    </CurrentLabel>\r\n  );\r\n}\r\n\r\nInput.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { CustomForm } from \"./Form.styled\";\r\nimport Button from \"../Button/Button\";\r\nimport Input from \"../Input/Input\";\r\n\r\nexport default function Form({ handleSubmit }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const handleSetInfo = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleAddContact = (e) => {\r\n    e.preventDefault();\r\n\r\n    handleSubmit({ name, number });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <CustomForm onSubmit={handleAddContact}>\r\n      <Input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={name}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        onChange={handleSetInfo}\r\n      />\r\n      <Input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        value={number}\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        onChange={handleSetInfo}\r\n      />\r\n      <Button type=\"submit\" text=\"Add contact\" />\r\n    </CustomForm>       \r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ContactItem = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  &:not(:last-child) {\r\n    margin-bottom: 8px;\r\n  }\r\n`;","import PropTypes from \"prop-types\";\r\nimport { ContactItem } from \"./ContactListItem.styled\";\r\nimport Button from \"../Button/Button\";\r\n\r\nexport default function ContactListItem({ name, number, handleDelete }) {\r\n  return (\r\n    <ContactItem>\r\n      {name} : {number}\r\n      <Button type=\"button\" text=\"delete\" onClick={handleDelete} />\r\n    </ContactItem>\r\n  );\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  handleDelete: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport ContactListItem from \"../ContactListItem/ContactListItem\";\r\n\r\nexport default function ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <ContactListItem\r\n          key={id}\r\n          name={name}\r\n          number={number}\r\n          handleDelete={() => onDeleteContact(id)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    })\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n","import { useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  Container,\n  Title,\n  SectionTitle,\n} from \"./Container/Container.styled.jsx\";\nimport Form from \"./Form/Form.jsx\";\nimport ContactList from \"./ContactList/ContactList.jsx\";\nimport Input from \"./Input/Input.jsx\";\n// [\n//     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//   ]\nexport default function App() {\n  const [contacts, setContacts] = useState(\n    JSON.parse(localStorage.getItem(\"contactList\")) ?? []\n  );\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    localStorage.setItem(\"contactList\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const formSubmitHandle = ({ name, number }) => {\n    const contact = { name, number, id: uuidv4() };\n    contacts.find((savedContact) => savedContact.name.toLowerCase() === name.toLowerCase())\n      ? alert(`${name} is already in contacts`)\n      : setContacts((prevContacts) => [...prevContacts, contact]);\n  };\n\n  const handleDelete = (contactId) => {\n    setContacts(contacts.filter((contact) => contact.id !== contactId));\n  };\n\n  const changeFilter = (e) => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const normaliseFilter = filter.toLowerCase();\n  const filteredContacts = contacts.filter((contact) =>\n    contact.name.toLowerCase().includes(normaliseFilter)\n  );\n\n  return (\n    <Container>\n      <Title>Phonebook</Title>\n      <Form handleSubmit={formSubmitHandle} />\n      {contacts.length !== 0 && <SectionTitle>Contacts</SectionTitle>}\n      {contacts.length !== 0 && (\n        <Input\n          name=\"Find contacts by name\"\n          type=\"text\"\n          value={filter}\n          onChange={changeFilter}\n        />\n      )}\n      <ContactList contacts={filteredContacts} onDeleteContact={handleDelete} />\n    </Container>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}